#!/bin/bash

# Copyright (c) 2009, 2010 Peter Palfrader
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e
set -u

MYLOGNAME="`basename "$0"`[$$]"
SNAPCONFIG="$HOME/etc/snapshot.conf"

usage() {
	echo "local Usage: $0 master|secondary"
	echo "via ssh orig command: farm-journal-fetch [since]"
	echo "                      git-upload-pack [path]"
	echo "                      rsync <arguments>"
	echo "                      sync-incremental"
}

one_more_arg() {
	if [ "$#" -lt 1 ]; then
		usage >&2
		exit 1
	fi
}

info() {
	logger -p daemon.info -t "$MYLOGNAME" "$1"
}

croak() {
	logger -s -p daemon.warn -t "$MYLOGNAME" "$1"
	exit 1
}

require_master() {
	if [ "$master" != "1" ] ; then
		croak "This command only works on master"
	fi
}
require_secondary() {
	if [ "$master" != "0" ] ; then
		croak "This command only works on secondary"
	fi
}



farm_journal_fetch() {
	local since=${1-0}

	if echo "$since" | grep -q '[^0-9]'; then
		croak "Invalid characters encountered in since '$since'"
	fi

	info "farm-journal-fetch since $since"
	"$HOME"/code/mirror/farm-journal-make-tarball -c "$SNAPCONFIG" -s "$since"
}

farm_make_update_tarball() {
	one_more_arg "$@"
	local prefix="$1"

	if ! echo "$prefix" | grep -q '^[0-9a-f][0-9a-f]$'; then
		croak "Invalid characters encountered in prefix '$prefix'"
	fi

	info "make-update-tarball $prefix"
	"$HOME"/code/mirror/farm-list-entries -c "$SNAPCONFIG" --diff "$prefix" |
	  "$HOME"/code/mirror/farm-make-tarball-from-list -c "$SNAPCONFIG"
}

do_rsync() {
	local allowed_command_prefixes
	allowed_rsyncs=(
		'^--server --sender -v?logDtprze\.iLs?f? \. dumps/$'
		'^--server --sender -v?logDtprze\.iLs?f? \. farm/[0-9a-f][0-9a-f]/$'
	)
	for cmd_idx in ${!allowed_rsyncs[*]}; do
		allowed="${allowed_rsyncs[$cmd_idx]}"
		if [[ "$*" =~ $allowed ]]; then # do !not! quote regex
			exec rsync "$@"
			echo >&2 "Exec failed"
			exit 1
		fi
	done

	echo >&2 "This rsync command ($*) not allowed."
	exit 1
}

if [ "${1-}" = "-h" ] || [ "${1-}" = "--help" ]; then
	usage
	exit 0
fi

one_more_arg "$@"
if [ "$1" = "master" ]; then master=1
elif [ "$1" = "secondary" ]; then master=0
else croak "Need to know if I am running on the master or on a secondary host."
fi
shift


# check/parse remote command line
if [ -z "${SSH_ORIGINAL_COMMAND:-}" ] ; then
	croak "Did not find SSH_ORIGINAL_COMMAND"
fi
set "dummy" ${SSH_ORIGINAL_COMMAND}
shift

one_more_arg "$@"
action="$1"
shift

case "$action" in
	farm-journal-fetch)
		require_master

		farm_journal_fetch "$@"
		;;

	farm-make-update-tarball)
		require_master

		farm_make_update_tarball "$@"
		;;

	git-upload-pack)
		require_master

		repo_list=()
		repo_list+=('/srv/snapshot.debian.org/snapshot.git')
		repo_list+=('/srv/snapshot.debian.org/dumps-git')
		for repo_idx in ${!repo_list[*]}; do
			repos="${repo_list[$repo_idx]}"
			if [ "$1" = "'$repos'" ]; then
				exec git-upload-pack "$repos"
			fi
		done
		croak "May not access this repository"
		;;
	rsync)
		do_rsync "$@"
		;;
	sync-incremental)
		require_secondary

		"$HOME/code/mirror/sync-incremental" &
		disown
		;;
	*)
		croak "Invalid operation '$action'"
		;;
esac
