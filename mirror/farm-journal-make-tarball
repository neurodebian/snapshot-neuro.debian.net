#!/usr/bin/python

# Copyright (c) 2010 Peter Palfrader
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# The farm_journal database table keeps a journal of which files got
# added to the farm recently.  This script outputs a tarball of the files
# referenced in the journal to stdout.

import tarfile
import sys
import yaml
import optparse
import os
import tempfile
sys.path.append(os.path.abspath(os.path.dirname(sys.argv[0]))+'/../lib')
from dbhelper import DBHelper

parser = optparse.OptionParser()
parser.set_usage("%prog --config=<conffile>")
parser.add_option("-c", "--config", dest="conffile", metavar="CONFFILE",
  help="Config file location.")
parser.add_option("-s", "--since", dest="since", metavar="UNIXTIME",
  help="Only include files strictly newer than this.")

(options, args) = parser.parse_args()
if options.conffile is None:
    parser.print_help()
    sys.exit(1)

config = yaml.safe_load(open(options.conffile).read())

def make_path(digest):
  prefix1 = digest[0:2]
  prefix2 = digest[2:4]
  return os.path.join(config['snapshot']['farmpath'], prefix1, prefix2, digest)


newest = 0
if options.since:
    newest = int(options.since)

db = DBHelper(config['db']['connectstring'])
args = {}
query = """SELECT hash,
                  EXTRACT (EPOCH FROM date_trunc('second', added)) AS added
           FROM farm_journal"""
if not options.since is None:
    query += " WHERE EXTRACT (EPOCH FROM date_trunc('second', added)) > %(since)s"
    args['since'] = options.since
c = db.execute(query, args)

tar = tarfile.open(mode="w|", fileobj=sys.stdout)
while True:
    f = c.fetchone()
    if f is None: break
    hash = f['hash']
    newest = max(newest, int(f['added']))

    tar.add(make_path(hash), arcname=hash)

(fd,fname) = tempfile.mkstemp(prefix='farm-journal-make-tarball.tmp')
try:
    f=os.fdopen(fd, "w")
    f.write(yaml.dump({'latest-timestamp': newest}))
    f.close()
    tar.add(fname, arcname='meta')
finally:
    os.unlink(fname)

tar.close()
c.close()


# vim:set et:
# vim:set ts=4:
# vim:set shiftwidth=4:
