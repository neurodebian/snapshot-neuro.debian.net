#!/usr/bin/python

# Copyright (c) 2010 Peter Palfrader
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# This script requests a tarball of recent additions to the farm from
# a remote farm-journal-make-tarball and puts those files into the local copy
# of the farm, verifying the sha1sums on files.
#
# it keeps a statefile in the root of the farm which indicates when
# the last such update happens so it can get only the files it hasn't
# seen.

import errno
import hashlib
import optparse
import os
import os.path
import shutil
import subprocess
import sys
import tarfile
import tempfile
import yaml

parser = optparse.OptionParser()
parser.set_usage("%prog --config=<conffile>")
parser.add_option("-c", "--config", dest="conffile", metavar="CONFFILE",
  help="Config file location.")
parser.add_option("-v", "--verbose", action="store_true",
  help="Config file location.")

(options, args) = parser.parse_args()
if options.conffile is None:
    parser.print_help()
    sys.exit(1)

config = yaml.load(open(options.conffile).read())

def get_statefile_path():
    return os.path.join(config['snapshot']['farmpath'], '.farm-journal-fetch.state')

def make_path(digest):
    prefix1 = digest[0:2]
    prefix2 = digest[2:4]

    dir = config['snapshot']['farmpath']
    for elem in (prefix1, prefix2):
        dir = os.path.join(dir, elem)
        if not os.path.exists(dir):
            os.mkdir(dir)
    return os.path.join(dir, digest)

def hash_file(fn):
    h = hashlib.sha1()
    f = open(fn)
    while True:
        c = f.read(64*1024)
        if c == "": break
        h.update(c)
    f.close()
    return h.hexdigest()

def copy_file(src, dst):
    tmpname = os.path.join(os.path.dirname(dst), ".tmp.fetch-tarball."+os.path.basename(dst))
    shutil.copy2(src, tmpname)
    os.link(tmpname, dst)
    os.unlink(tmpname)

def move_file_with_fallback(src, dst):
    try:
        if not os.path.exists(dst):
            os.link(src, dst)
    except OSError, ex:
        if ex.errno not in [errno.EXDEV]:
            raise
        copy_file(src, dst)
    os.unlink(src)



statefile = get_statefile_path()
since = 0
if os.path.exists(statefile):
    meta = yaml.load(open(statefile).read())
    if 'latest-timestamp' in meta:
        since = int(meta['latest-timestamp'])

tmpdir = tempfile.mkdtemp(prefix='.tmp.fetch-tarball.', dir=config['snapshot']['farmpath'])
try:
    os.chdir(tmpdir)
    command = 'ssh -C snapshot-master.debian.org farm-journal-fetch %d | tar xf -'%(since)
    retcode = subprocess.check_call(command, shell=True)
    for fn in os.listdir('.'):
        if fn == "meta": continue

        h = hash_file(fn)
        if fn != h:
            sys.stderr.write("Warning: File %s has unexected hash value %s.  Ignoring\n"%(fn, h))
            os.unlink(fn)
            continue

        target = make_path(h)

        if options.verbose: print "%s -> %s"%(fn,target)
        move_file_with_fallback(fn, target)

    if os.path.exists('meta'):
        try:
            meta = yaml.load(open('meta').read())
            if 'latest-timestamp' in meta:
                f = open(statefile, "w")
                f.write(yaml.dump(meta))
                f.close()
        except:
            pass

finally:
    shutil.rmtree(tmpdir)

# vim:set et:
# vim:set ts=4:
# vim:set shiftwidth=4:
