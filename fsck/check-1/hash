#!/usr/bin/python

import os
import re
import sys
import threading
import Queue
sys.path.append(os.path.abspath(os.path.dirname(sys.argv[0]))+'/lib/python2.5/site-packages')
import hasher



farmpath = '/srv/snapshot.debian.org/farm'
numthreads = 16
verbose = 3

queuesize = numthreads*2
workqueue = Queue.Queue(queuesize)
errors = []

class HashingThread(threading.Thread):
    def run(self):
        while True:
            item = workqueue.get()
            if item is None:
                workqueue.task_done()
                break

            (path, filename) = item

            if verbose >= 5: print "%s: starting"%(filename)
            try:
                actual_hash = hasher.hash_file(os.path.join(path, filename))
            except Exception, e:
                errors.append((filename, 'Exception: %s'%(e)))
                if verbose >= 4: print "%s: Exception (%s)"%(filename, e)
                continue

            if actual_hash != filename:
                errors.append((filename, 'Hash mismatch (%s)'%(actual_hash)))
                if verbose >= 4: print "%s: Hash mismatch (%s)"%(filename, actual_hash)
            else:
                if verbose >= 4: print "%s: OK"%(filename)
                elif verbose >= 2: sys.stdout.write("."); sys.stdout.flush()
            workqueue.task_done()

for x in xrange ( numthreads ):
   HashingThread().start()

try:
    for byte1 in xrange(256):
        if verbose >= 1: print "queueing %02x:"%(byte1)
        for byte2 in xrange(256):
            if verbose >= 2: print "queueing %02x%02x:"%(byte1, byte2)
            p = os.path.join(farmpath, '%02x'%byte1, '%02x'%byte2)
            for filename in os.listdir(p):
                if re.match('[0-9a-f]{40}$', filename) is None:
                    errors.append((filename, 'Invalid name'))
                    if verbose >= 6: print "Invalid name %s"%(filename)
                    continue
                if verbose >= 6: print "queueing %s"%(filename)
                workqueue.put((p, filename))
finally:
    for x in xrange ( numthreads ):
       workqueue.put(None)

workqueue.join()
for e in errors:
    print "%s: %s"%(e[0], e[1])

# vim:set ts=4:
# vim:set et:
# vim:set shiftwidth=4:
